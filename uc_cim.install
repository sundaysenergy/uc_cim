<?php
/**
 * @file
 * Ubercart Authorize.Net CIM Installation
 */

/**
 * Implementation of hook_install().
 */
function uc_cim_install() {

  // Install the schema.
  drupal_install_schema('uc_cim');
}

/**
 * Implementation of hook_uninstall().
 */
function uc_cim_uninstall() {

  // Uninstall the schema.
  drupal_uninstall_schema('uc_cim');

  // Delete variables.
  variable_del('uc_cim_login_id');
  variable_del('uc_cim_transaction_key');
  variable_del('uc_cim_delimiter');
  variable_del('uc_cim_not_process_preorders');
  variable_del('uc_cim_transaction_mode');
  variable_del('uc_cim_logging_level');
  variable_del('uc_cim_send_error_notifications');
  variable_del('uc_cim_error_notifications_to');
  variable_del('uc_cim_hourly_threshold');
  variable_del('uc_cim_login_id_TEST');
  variable_del('uc_cim_transaction_key_TEST');
}

/**
 * Implementation of hook_schema().
 */
function uc_cim_schema() {
  $schema['uc_cim_payment_profiles_TEST'] = array(
    'fields' => array(
      'customer_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11'),
      'customer_payment_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11'),
      'last_four' => array('type' => 'char', 'length' => '4', 'not null' => TRUE),
      'cc_cvv' => array('type' => 'char', 'length' => '4', 'not null' => TRUE, 'default' => '000'),
      'cc_type' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE),
      'cc_exp_year' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'disp-width' => '6'),
      'cc_exp_month' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'disp-width' => '4'),
      'exp_notification' => array('type' => 'int', 'disp-width' => '11')
    ),
    'indexes' => array(
      'customer_payment_profile_id' => array('customer_payment_profile_id'),
      'customer_profile_id' => array('customer_profile_id')),
  );

  $schema['uc_cim_TEST'] = array(
    'fields' => array(
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'disp-width' => '10'),
      'customer_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11')),
    'primary key' => array('uid'),
  );

  $schema['uc_cim_payment_profiles'] = array(
    'fields' => array(
      'customer_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11'),
      'customer_payment_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11'),
      'last_four' => array('type' => 'char', 'length' => '4', 'not null' => TRUE),
      'cc_cvv' => array('type' => 'char', 'length' => '4', 'not null' => TRUE, 'default' => '000'),
      'cc_type' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE),
      'cc_exp_year' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'disp-width' => '6'),
      'cc_exp_month' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'disp-width' => '4'),
      'exp_notification' => array('type' => 'int', 'disp-width' => '11')
    ),
    'indexes' => array(
      'customer_payment_profile_id' => array('customer_payment_profile_id'),
      'customer_profile_id' => array('customer_profile_id')),
  );

  $schema['uc_cim'] = array(
    'fields' => array(
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'disp-width' => '10'),
      'customer_profile_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11')),
    'primary key' => array('uid'),
  );

  $schema['uc_payment_cim'] = array(
    'fields' => array(
      'order_id' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11'),
      'cim_ppid' => array('type' => 'int', 'not null' => TRUE, 'disp-width' => '11')),
    'primary key' => array('order_id'),
    'indexes' => array(
      'cim_ppid' => array('cim_ppid'),
    ),
  );
  return $schema;
}

/*
 * Upgrade 1
 */
function uc_cim_update_1() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':

      $ret[] = update_sql("CREATE TABLE {uc_cim_TEST} (
        uid mediumint(9) NOT NULL,
				customer_profile_id int(11) NOT NULL,
				PRIMARY KEY uid (uid)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */");

      $ret[] = update_sql("CREATE TABLE {uc_cim_payment_profiles_TEST} (
				customer_profile_id int(11) NOT NULL,
				customer_payment_profile_id int(11) NOT NULL,
				last_four char(4) NOT NULL,
				cc_cvv char(4) NOT NULL,
				cc_type varchar(255) NOT NULL,
				cc_exp_year smallint(6) NOT NULL,
				cc_exp_month tinyint(4) NOT NULL,
				KEY customer_profile_id (customer_profile_id),
				KEY customer_payment_profile_id (customer_payment_profile_id)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
    break;
  }
  return $ret;
}

/**
 * Add notification timestamp for expiring credit cards.
 */
function uc_cim_update_6202(&$sandbox = NULL) {
  $ret = array();
  db_add_field($ret, 'uc_cim_payment_profiles', 'exp_notification', array('type' => 'int', 'disp-width' => '11'));
  db_add_field($ret, 'uc_cim_payment_profiles_TEST', 'exp_notification', array('type' => 'int', 'disp-width' => '11'));
  return $ret;
}

/**
 * Update schema to handle order_id integers correctly, and fix indices
 */
function uc_cim_update_6203(&$sandbox = NULL) {
  $ret = array();
  db_drop_index($ret, 'uc_payment_cim', 'order_id');
  db_change_field($ret, 'uc_payment_cim', 'order_id', 'order_id',
    array('type' => 'int', 'not null' => TRUE),
    array('primary key' => array('order_id'))
  );
  db_add_index($ret, 'uc_payment_cim', 'cim_ppid', array('cim_ppid'));
  return $ret;
}

/**
 * Change uc_cim uid field to allow larger UID
*/
function uc_cim_update_6204() {
  $ret = array();
  db_change_field($ret, 'uc_cim', 'uid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field($ret, 'uc_cim_TEST', 'uid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
  return $ret;
}

/**
 * Change the names of the module's variables so they are properly namespaced.
 * The following variables were already namespaced correctly, so those are left alone:
 * uc_cim_send_error_notifications
 * uc_cim_error_notifications_to
 * uc_cim_hourly_threshold
 */
function uc_cim_update_6205() {
  $ret = array();

  // Copy the old values to the new variables.
  variable_set('uc_cim_login_id', variable_get('cim_login_id', ''));
  variable_set('uc_cim_transaction_key', variable_get('cim_transaction_key', ''));
  variable_set('uc_cim_delimiter', variable_get('cim_delimiter', ','));
  variable_set('uc_cim_not_process_preorders', variable_get('cim_not_process_preorders', FALSE));
  variable_set('uc_cim_transaction_mode', variable_get('cim_transaction_mode', 'test'));
  variable_set('uc_cim_logging_level', variable_get('cim_logging_level', 'standard'));
  variable_set('uc_cim_login_id_TEST', variable_get('cim_login_id_TEST', ''));
  variable_set('uc_cim_transaction_key_TEST', variable_get('cim_transaction_key_TEST', ''));

  // Delete the old variables.
  variable_del('cim_login_id');
  variable_del('cim_transaction_key');
  variable_del('cim_delimiter');
  variable_del('cim_not_process_preorders');
  variable_del('cim_transaction_mode');
  variable_del('cim_logging_level');
  variable_del('cim_login_id_TEST');
  variable_del('cim_transaction_key_TEST');
  return $ret;
}