<?php

/**
 * @file
 * A module used for Advanced Authorize.net payment gateway functionality
 * based on their Customer Information Manager (CIM) API.
 *
 * Developed by ChadCrew
 * For help integrating this module or setting up an Authorize.net CIM gateway and
 * Merchant Account, please contact chadcrew  gmail.com
 *
 * Ported by justindodge
 * 
 * Patched, revised, and extended by RSTaylor
 *
 * TODO:
 *   [ ] Admin report of card expiration dates
 */

// Conditional Actions
require_once 'includes/uc_cim.ca.inc';

/* ******************************************************************************
 * Drupal Hooks
 * *****************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_cim_menu() {
    //Gets the full list of CIM stored profiles and lets you delete them. Useful for testing.
    $items['admin/store/customers/cim'] = array(
      'title' => 'CIM Customer Profiles',
      'page callback' => 'uc_cim_management',
      'access arguments' => array('process credit cards'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/uc_cim.pages.inc',
    );

    $items['admin/store/customers/cim/%/delete'] = array(
      'title' => 'Delete CIM Customer Profiles',
      'page callback' => 'uc_cim_delete_profile',
      'page arguments' => array(4),
      'access arguments' => array('process credit cards'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/uc_cim.pages.inc',
    );

      //Charge or edit a CIM stored card from the order page
      $items['admin/store/orders/%/cim-charge'] = array(
        'title' => 'CIM Credit Card Terminal: Order !order_id',
        'title arguments' => array('!order_id' => 3),
        'description' => 'Process a credit card payment for an order using a stored credit card.',
        'page callback' => 'uc_cim_terminal',
        'page arguments' => array(3),
        'access arguments' => array('process credit cards'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/uc_cim.pages.inc',
      );

      //Admin edit card
      $items['admin/store/orders/%/cim-edit'] = array(
        'title' => 'Edit Credit Card Information: Customer !user_id',
        'title arguments' =>  array('!user_id' => 3),
        'description' => 'Edit a stored credit card for a customer.',
        'page callback' => 'uc_admin_edit_card',
        'page arguments' => array(3),
        'access arguments' => array('process credit cards'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/uc_cim.pages.inc',
      );

      //User edit card - arg(2) should contain the cim_ppid
      $items['user/billing/%'] = array(
        'title' => 'Update your credit card information',
        'page callback' => 'uc_user_edit_card',
        'page arguments' => array(2),
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'includes/uc_cim.pages.inc',
      );

      //Refund or void a CIM stored payment from the order page
      $items['admin/store/orders/%/payments/%/refund'] = array(
        'title' => 'CIM Refund Terminal: Order !order_id',
        'title arguments' =>  array('!order_id' => 3),
        'description' => 'Process a credit card refund for an order.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('uc_cim_refund_form', 3, 5),
        'access arguments' => array('process credit cards'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/uc_cim.pages.inc',
      );
      $items['user/%user/creditcards'] = array(
        'title' => 'Manage Credit Cards',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('uc_cim_manage_page_form', 1),
        'access callback' => 'uc_cim_manage_cards_access',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'file' => 'includes/uc_cim.pages.inc',
      );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_cim_theme($existing, $type, $theme, $path) {
  return array(
    'uc_cim_credit_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/uc_cim.theme.inc',
    ),
    'uc_cim_edit_card_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/uc_cim.theme.inc',
    ),
    'uc_cim_refund_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/uc_cim.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function uc_cim_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_payment_by_order_form') {
    //Add a refund link to the payments table form, if there is a transaction id stored in the serialized data (perfomance issue???)

    $order = uc_order_load($form['order_id']['#value']);
    $payments = uc_payment_load_payments($order->order_id);

    if ($payments !== FALSE) {
      foreach ($payments as $payment) {
        $data = unserialize($payment->data);
        if ($data['transaction_id']) {
          $refund = l(t('Refund'), 'admin/store/orders/'. $order->order_id .'/payments/'. $payment->receipt_id .'/refund');
          $form['payments'][$payment->receipt_id]['action']['#value'] .= '<br/>'. $refund;
        }
      }
    }
  }
}

/**
 * Implementation of hook_mail().
 * TODO:
 *   [ ] move subjects and bodies into variables set in admin interface
 */
function uc_cim_mail($key, &$message, $params) {
  $language = $message['language'];
  switch ($key) {
    case 'error_notice':
      $variables = array(
        '!site' => check_plain( variable_get('site_name', 'your website') ),
        '!error_type' => check_plain( $params['error_type'] ),
        '!error_message' => check_plain( $params['error_message'] ),
      );
      $message['subject'] = t('Notification from !site', $variables, $language->language);
      $message['body'][] = t("An error has occurred while attempting to communicate with Authorize.net.\nThe site may be unable to process credit cards and/or customer information management functions.\n\nError type: !error_type\nError message: !error_message\n\n", $variables, $language->language);
      break;
  }
}

/**
 * Implementation of hook_cron().
 */
function uc_cim_cron() {
  // notify customers & admin of credit card expiration
  $sql = 'SELECT * FROM {'. uc_cim_table('uc_cim_payment_profiles') .'} p LEFT JOIN {'. uc_cim_table('uc_cim') .'} c USING(customer_profile_id) LEFT JOIN {users} u USING( uid ) WHERE cc_exp_year <= %d AND cc_exp_month <= %d AND exp_notification IS NULL';
  $result = db_query($sql, date('Y'), date('m'));
  while ($row = db_fetch_object($result)) {
    $account = user_load(array('uid' => $row->uid));
    ca_pull_trigger('uc_cim_notify_expiring', $account, $row);
  }
}

/* ******************************************************************************
 * Ubercart Hooks
 * *****************************************************************************/

/**
 * Implementation of hook_uc_message().
 */
function uc_cim_uc_message() {
  $messages['uc_cim_expiring_subject'] = t('[store-name]: Billing info needs to be updated.');
  $messages['uc_cim_expiring_message'] = t("[user], \n\nYour billing information has a credit card on file which is expired or will be expiring soon.\n\nAccording to our information, [card-type] with last four digits \"[last-four]\" [expiration-message].\n\nTo avoid problems with your membership, please login and update your billing info.\n\nThank you, \n\n[store-name]\n[site-slogan]");

  return $messages;
}

/**
 * Implementation of hook_payment_gateway().
 * http://www.ubercart.org/docs/api/hook_payment_gateway
 */
function uc_cim_payment_gateway() {
  $gateways[] = array(
    'id' => 'cim',
    'title' => t('Authorize.net CIM'),
    'description' => t('Process and store credit card information using the CIM service of Authorize.net.'),
    'settings' => 'uc_cim_settings_form',
    'credit' => 'uc_cim_charge',
    'cim' => 'uc_cim_charge',
  );
  return $gateways;
}

/**
 * Implementation of hook_payment_method().
 */
function uc_cim_payment_method() {
  if (arg(0) == 'cart' && uc_credit_encryption_key() === FALSE) {
    return;
  }

  $path = base_path() . drupal_get_path('module', 'uc_credit');
  $title = t('Credit card:');
  $cc_types = array('visa', 'mastercard', 'discover', 'amex');
  foreach ($cc_types as $type) {
    if (variable_get('uc_credit_'. $type, TRUE)) {
      $title .= ' <img src="'. $path .'/images/'. $type .'.gif" style="position: relative; top: 5px;">';
    }
  }
  $methods[] = array(
    'id' => 'cim',
    'name' => t('CIM Credit card'),
    'title' => $title,
    'desc' => t('Pay by credit card.'),
    'callback' => 'uc_payment_method_cim',
    'weight' => 2,
    'checkout' => TRUE,
  );

  return $methods;
}

/**
 * Implementation of hook_order_pane().
 * http://www.ubercart.org/docs/api/hook_order_pane
 */
function uc_cim_order_pane() {
  $panes[] = array(
    'id' => 'cim',
    'callback' => 'uc_order_pane_cim',
    'title' => t('Credit Card Payment'),
    'desc' => t('CIM Stored Credit Card processing'),
    'class' => 'abs-left',
    'weight' => 4,
    'show' => array('view', 'customer', 'edit'),
  );

  return $panes;
}

/**
 * Implementation of hook_checkout_pane().
 * http://www.ubercart.org/docs/api/hook_checkout_pane
 */
function uc_cim_checkout_pane() {
  $panes[] = array(
    'id' => 'cim',
    'callback' => 'uc_checkout_pane_cim',
    'title' => 'Payment Information',
    'desc' => t('Lets users select a credit card they already entered, or enter a new credit card and billing address.'),
    'weight' => 6,
    'enabled'  => FALSE,
  );
  $panes[] = array(
    'id' => 'cim_functionality',
    'callback' => 'uc_checkout_pane_cim_functionality',
    'title' => 'CIM Functionality',
    'desc' => t('Provides functionality to the CIM module during checkout.  This pane is not visible.'),
    'weight' => 6,
    'enabled'  => FALSE,
  );

  return $panes;
}

/**
 * Implementation of hook_order().
 * http://www.ubercart.org/docs/api/hook_order
 */
function uc_cim_order($op, &$arg1, $arg2) {
  if ($arg1->payment_method != 'cim') return;

  switch ($op) {

    case 'submit':
      if ($arg1->payment_method == 'cim' && variable_get('uc_credit_checkout_process', FALSE)) {

        //Handle pre-orders for out of stock items by adjusting the order total, temporarily
        $real_order_total = $arg1->order_total;
        $arg1->order_total = uc_cim_in_stock_amount($arg1);

        //Invoke uc-credit hook_order to process the payment. Need to set method to 'credit' temporarily
        $arg1->payment_method = 'credit';
        $return = uc_credit_order($op, $arg1, $arg2);
        $arg1->payment_method = 'cim';

        //Reset the order total to the real total, so that the order object gets saved correctly
        $arg1->order_total = $real_order_total;

        //Should return nothing on success, but array("FALSE", message) on fail...
        return $return;

      }
      break;

    case 'save':
      //Invoke uc-credit hook_order to take care of the new credit cards. Need to set method to 'credit' temporarily
      $arg1->payment_method = 'credit';
      uc_credit_order($op, $arg1, $arg2);
      $arg1->payment_method = 'cim';

      //Save cim_ppid, if an *existing* card was selected. (New cards are saved in the charge function)
      if (($arg1->cim_ppid > 0) && $arg1->payment_details['cc_number'] == NULL) {
        db_query("UPDATE {uc_payment_cim} SET cim_ppid = %d WHERE order_id = %d", $arg1->cim_ppid, $arg1->order_id);
        if (db_affected_rows() == 0) {
          db_query("INSERT INTO {uc_payment_cim} (order_id, cim_ppid) VALUES (%d, %d)", $arg1->order_id, $arg1->cim_ppid);
        }
      }
      break;

    case 'load':

      //Invoke uc-credit hook_order to take care of the new credit cards. Need to set method to 'credit' temporarily
      $arg1->payment_method = 'credit';
      uc_credit_order($op, $arg1, $arg2);
      $arg1->payment_method = 'cim';

      //Add in support for cim_ppid
      $result = db_query("SELECT * FROM {uc_payment_cim} WHERE order_id = %d", $arg1->order_id);
      if ($data = db_fetch_object($result)) {
        $arg1->cim_ppid = $data->cim_ppid;
      }
      break;

    case 'delete':
      db_query("DELETE FROM {uc_payment_cim} WHERE order_id = %d", $arg1->order_id);
      break;
  }
}

/* ******************************************************************************
 * Token Hooks
 * *****************************************************************************/

/**
 * Implementation of hook_token_values().
 */
function uc_cim_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'uc_cim_payment_profile') {
    $payment_profile = $object;
    $tokens['uid'] = $payment_profile->uid;
    $tokens['customer-profile-id'] = $payment_profile->customer_profile_id;
    $tokens['payment-profile-id'] = $payment_profile->customer_payment_profile_id;
    $tokens['last-four'] = sprintf( "%04d", $payment_profile->last_four );
    $tokens['card-type'] = check_plain($payment_profile->cc_type);
    $tokens['expiration-year'] = sprintf( "%04d", $payment_profile->cc_exp_year );
    $tokens['expiration-month'] = sprintf( "%02d", $payment_profile->cc_exp_month );
    if ( $payment_profile->cc_exp_year <= date('Y') && $payment_profile->cc_exp_month < date('m')) {
      $tokens['expiration-message'] = t('expired on @m/@y', array('@m' => sprintf( "%02d", $payment_profile->cc_exp_month ), '@y' => sprintf( "%04d", $payment_profile->cc_exp_year )));
    }
    else {
      $tokens['expiration-message'] = t('will expire on @m/@y', array('@m' => sprintf( "%02d", $payment_profile->cc_exp_month ), '@y' => sprintf( "%04d", $payment_profile->cc_exp_year )));
    }
    $tokens['payment-profile-edit-link'] = l(t('edit your billing information'), 'user/billing/'. $payment_profile->customer_payment_profile_id, array('absolute' => TRUE));
    return $tokens;
  }
}

/**
 * Implementation of hook_token_list().
 */
function uc_cim_token_list($type = 'all') {
  if ($type == 'uc_cim_payment_profile' || $type == 'all') {
    $tokens['uc_cim_payment_profile']['uid'] = t('The user id of the payment profile');
    $tokens['uc_cim_payment_profile']['customer-profile-id'] = t('The CIM customer profile id of the user');
    $tokens['uc_cim_payment_profile']['payment-profile-id'] = t('The CIM payment profile id of this credit card');
    $tokens['uc_cim_payment_profile']['last-four'] = t('Last four digits of the credit card');
    $tokens['uc_cim_payment_profile']['card-type'] = t('Credit card type, if known');
    $tokens['uc_cim_payment_profile']['expiration-year'] = t('Expiration year of this credit card');
    $tokens['uc_cim_payment_profile']['expiration-month'] = t('Expiration month of this credit card');
    $tokens['uc_cim_payment_profile']['expiration-message'] = t('Expiration message, depending on date.  Either "will expire on mm/yyyy" or "expired on mm/yyyy".');
    $tokens['uc_cim_payment_profile']['payment-profile-edit-link'] = t('Link to edit billing info.');
    return $tokens;
  }
}


/* END HOOKS */


/* ******************************************************************************
 * Callback Functions, Forms, and Tables
 * *****************************************************************************/

/**
 * Callback function for CIM payment gateway
 */
function uc_cim_settings_form() {
  $form['cim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CIM settings'),
  );
  // Primary settings
  $form['cim_settings']['cim_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#default_value' => variable_get('cim_login_id', ''),
    '#description' => t('The login username used for the Authorize.net service.'),
  );
  $form['cim_settings']['cim_transaction_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction key'),
    '#default_value' => variable_get('cim_transaction_key', ''),
    '#description' => t('Your API transaction key for sending encrypted data.'),
  );
  $form['cim_settings']['cim_delimiter'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorize.net response delimitting character'),
    '#default_value' => variable_get('cim_delimiter', ','),
    '#description' => t('Authorize.net provides success/error responses in a charcter-delimited format. Usually this is a comma (,). Sometimes its a pipe (|). If your transaction is failing but you are not getting any useful error messages in your log, this may be the reason. Check your Authorize.net Direct Response Delimiter selection.'),
  );
  $form['cim_settings']['cim_not_process_preorders'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do NOT process out-of-stock items?'),
    '#description' => t('If this is checked, the customer will not be charged for out-of-stock items at checkout. Their card will be verified, but you will have to process the charges later.'),
    '#default_value' => variable_get('cim_not_process_preorders', FALSE),
  );
  $form['cim_settings']['cim_transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('"Production" and "Test Mode" will submit transactions using the login id and transaction key entered above.  "Production" sumbits real transactions.  "Test Mode" only validates credit cards, it does not process them.  This makes "Test mode" somewhat useful for testing your setup.  "Developer Test" submits transactions to the URL for a developers test account, using the login information below.'),
    '#options' => array(
      'production' => t('Production'),
      'test_mode' => t('Test Mode'),
      'test' => t('Developer Test Mode'),
    ),
    '#default_value' => variable_get('cim_transaction_mode', 'test'),
  );

  // Enable extended logging holding both XML sent and response received
  $form['cim_settings']['cim_logging_level'] = array(
    '#type' => 'select',
    '#title' => t('Logging level'),
    '#description' => t('Extended logging stores more information about each CIM request to and response from Authorize.net, but does not log credit card or CVV numbers.'),
    '#options' => array(
      'standard' => t('Standard'),
      'extended' => t('Extended'),
    ),
    '#default_value' => variable_get('cim_logging_level', 'standard'),
  );

  // Enable critical error notifications
  $form['cim_settings']['critical_error_notifications'] = array(
    '#type' => 'fieldset',
    '#title' => t('Critical error notifications'),
  );
  $form['cim_settings']['critical_error_notifications']['uc_cim_send_error_notifications'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send error notifications'),
    '#description' => t('If you uncheck this, no notifications will be sent on critical errors.'),
    '#default_value' => variable_get('uc_cim_send_error_notifications', 1),
  );
  $account = user_load( array('uid' => 1) );
  $form['cim_settings']['critical_error_notifications']['uc_cim_error_notifications_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Error notifications to'),
    '#description' => t('In the event of critical errors, such as being unable to connect to Authorize.net, notifications will be sent to this email.'),
    '#default_value' => variable_get('uc_cim_error_notifications_to', $account->mail),
  );
  $form['cim_settings']['critical_error_notifications']['uc_cim_hourly_threshold'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#title' => t('Error notifications hourly threshold'),
    '#description' => t('To avoid flooding the recipient\'s email, only a maximum of this many error notifications will be sent per hour.'),
    '#default_value' => variable_get('uc_cim_hourly_threshold', 3),
  );

  // Developer test mode settings
  $form['cim_settings']['test_mode_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CIM test mode settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These login settings are used instead of the above ones while in the test transaction mode. By setting the seperate login information below, you can save CIM credit card info to your developers account while testing.'),
  );
  $form['cim_settings']['test_mode_settings']['cim_login_id_TEST'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#default_value' => variable_get('cim_login_id_TEST', ''),
    '#description' => t('The login username used for the Authorize.net DEVELOPER TEST ACCOUNT.'),
  );
  $form['cim_settings']['test_mode_settings']['cim_transaction_key_TEST'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction key'),
    '#default_value' => variable_get('cim_transaction_key_TEST', ''),
    '#description' => t('Your API transaction key for sending encrypted data to your Authorize.net DEVELOPER TEST ACCOUNT.'),
  );
  return $form;
}

/**
 * Callback function for CIM payment gateway
 */
function uc_cim_charge($order_id, $amount, $data = NULL, $update_cim_order_table = TRUE) {
  module_load_include('inc', 'uc_cim', 'includes/uc_cim.charge');
  return _uc_cim_charge($order_id, $amount, $data, $update_cim_order_table);
}

/**
 * CHECKOUT and ORDER screens
 */
function uc_cim_credit_card_form($user_id, $order, $address_book_path = 'panes-cim-billing-address-billing', $delivery_path = 'panes-delivery-delivery') {

  //Add our css and revised javascript for copying addresses to our revised address form
  drupal_add_js(drupal_get_path('module', 'uc_cim') .'/uc_cim.js');
  drupal_add_css(drupal_get_path('module', 'uc_cim') .'/uc_cim.css');
  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css'); //For pages where the form is used not on the checkout screen, we still need that cart styling...
  $edit_card = '<img src="'. base_path() . drupal_get_path('module', 'uc_cim') .'/edit_credit_card.png" title="Edit credit card information" class="edit-card"/>';

  //Get credit cards already entered, for user id passed in
  if ($user_id) {
    $profile_id = uc_cim_get_profile_id($user_id);
    if ($profile_id) $profiles = uc_cim_get_payment_profiles($profile_id);
    if ($profiles) {
      foreach ($profiles as $profile) {

        // The edit card info link depends on where we are.
        // In the admin interface, it should go to admin/store/orders/[order_id]/cim-edit/[customer_payment_profile_id]?destination=[current path]
        if (arg(0) == 'admin') {
          $edit_link = l($edit_card, 'admin/store/orders/' . $order->uid . '/cim-edit/' . $profile['customer_payment_profile_id'], array('query' => 'destination=' . $_GET['q'], 'html' => TRUE));
        }
        // In checkout, it should go to user/billing/[customer_payment_profile_id]?destination=cart/checkout
        elseif (arg(0) == 'cart' && arg(1) == 'checkout') {
          $edit_link = l($edit_card, 'user/billing/' . $profile['customer_payment_profile_id'], array('query' => 'destination=cart/checkout', 'html' => TRUE));
        }
        // Everywhere else, it should go to user/billing/[customer_payment_profile_id]?destination=[current path]
        else {
          $edit_link = l($edit_card, 'user/billing/' . $profile['customer_payment_profile_id'], array('query' => 'destination=' . $_GET['q'], 'html' => TRUE));
        }

        //Shorten American Express to Amex to save space
        if ($profile['cc_type'] == 'American Express') $profile['cc_type'] = 'Amex';

        //Create the options
        $options[$profile['customer_payment_profile_id']] = $profile['cc_type'] .': '. uc_credit_display_number($profile['last_four']) .' '. $edit_link;
      }
      $options[0] = 'Enter a new credit card';
    }
  }

  //Display existing credit cards
  if ($options) {
    $existing_cards_form['cards'] = array(
      '#type' => 'radios',
      '#title' => t('Credit Cards'),
      '#options' => $options,
      '#default_value' => is_numeric($order->cim_ppid) ? $order->cim_ppid : array_shift(array_keys($options)),
      '#required' => TRUE,
      '#attributes'  => array('onclick' => "uc_cim_toggle_new_card(this.value);"),
      '#prefix' => '<div class="choose-credit-card">',
      '#suffix' => '</div>',
    );
  }

  //Get the new credit card form
  $credit_form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('New credit card'),
    '#attributes' => array('id' => 'credit-card'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="enter-new-credit-card">',
  );
  $credit_form['credit_card'] = array_merge($credit_form['credit_card'], uc_payment_method_credit_form(array(), $order));

  //Make a couple changes so that it displays better in our form
  $credit_form['credit_card']['cc_policy']['#value'] = '';
  $credit_form['credit_card']['cc_number']['#title'] = '';
  $credit_form['credit_card']['cc_exp_month']['#title'] = '';
  $credit_form['credit_card']['cc_exp_year']['#title'] = '';
  $credit_form['credit_card']['#theme'] = 'uc_cim_credit_form';

  //Get the billing address form
  $billing_form_temp = uc_checkout_pane_billing('view', $order, NULL);

  //Remove the required tag, if there are existing credit cards
  if ($existing_cards_form) {
    foreach ($billing_form_temp['contents'] as $key => $billing_form_item) {
      $billing_form_temp['contents'][$key]['#required'] = FALSE;
    }
  }

  //Put the billing address form in a fieldset
  $billing_form['billing_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing address for new credit card'),
    '#attributes' => array('id' => 'billing-address'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#theme' => $billing_form_temp['theme'],
    '#suffix' => '</div>',
  );
  $address_form['billing_address'] = array_merge($billing_form['billing_address'], $billing_form_temp['contents']);

  //For admin orders, add copy shipping info checkbox to billing address, because it won't be set for new orders
  if (arg(0) == 'admin' && arg(2) == 'orders') $contents['copy_address'] = array( '#type' => 'checkbox', '#title' => t('My billing information is the same as my delivery information.'), '#attributes' => array('onclick' => "uc_cart_copy_address(this.checked, 'delivery', 'billing');") );

  //Set new javascript functions for our billing form so that copy and update address JS works
  $address_form['billing_address']['copy_address']['#attributes']['onclick'] = 'uc_cim_copy_delivery_to_billing(this.checked, "'. $address_book_path .'", "'. $delivery_path .'");';
  if ($address_form['billing_address']['billing_address_select']) {
    $address_form['billing_address']['billing_address_select'] = uc_select_address($user_id, 'billing', "uc_cim_apply_address('". $address_book_path ."', this.value);", $title = NULL, $icon_suffix = FALSE);
  }

  //MERGE ALL
  if ($existing_cards_form) {
    $form = array_merge($existing_cards_form, $credit_form, $address_form);
  }
  else {
    $form = array_merge($credit_form, $address_form);
    $form['credit_card']['#title'] = 'Credit card';
    $form['credit_card']['#collapsed'] = FALSE;
    $form['billing_address']['#collapsed'] = FALSE;
    $form['credit_card']['#prefix'] = '<div class="no-credit-cards-stored">';
  }

  return $form;
}

/**
 * Helper function for debugging
 */
function uc_cim_printr($data) {
  return '<pre>'. print_r($data, TRUE) .'</pre>';
}

/**
 * Checkout Pane Builder Function
 * http://www.ubercart.org/docs/developer/245/checkout
 *
 * @param  $op
 * ops:
 * view - Called to display the pane on the checkout screen. Expected to return a pane object with the attribute fields set to be an array of form elements. $arg1 is the current order object if it exists.
 * review - Called to display a review of the pane's information the order review screen when checking out. Expected to return a string containing HTML output that will be dropped into a div. $arg1 is the current order object.
 * process - Called when the temporary order is created during checkout after the customer continues from the checkout screen and before the review screen is displayed. No return is expected. $arg1 is a reference to the current order object. (So, by modifying $arg1 in the process block, you are modifying the actual order.) $arg2 is the contents of the array of the submitted form information for that pane.
 *
 * @param $arg1 - The order object, taken by reference when the op is 'process'
 *
 * @param $arg2 - Submitted form information from this pane
 */
function uc_checkout_pane_cim($op, &$arg1, $arg2) {
  module_load_include('inc', 'uc_cim', 'includes/uc_cim.checkout_panes');
  return _uc_checkout_pane_cim($op, $arg1, $arg2);
}

/**
 * Order Pane - CIM Stored Credit Card processing
 */
function uc_order_pane_cim($op, $arg1) {
  module_load_include('inc', 'uc_cim', 'includes/uc_cim.order_panes');
  return _uc_order_pane_cim($op, $arg1);
}

/**
 * uc_payment_method_cim
 */
function uc_payment_method_cim($op, &$arg1, $silent = FALSE) {
  switch ($op) {
    //Called when you click the radio for this option in the payment method pane
    case 'cart-details':
      global $user;
      $return = uc_checkout_pane_cim('view', $arg1, NULL);
      $description = '<div class="cim-description">'. $return['description'] .'</div>';
      $output = $description . drupal_get_form('uc_cim_credit_card_form_drupal', $user->uid, $arg1);
      return uc_strip_form($output);
    break;

    case 'cart-process' :
      //here we have to fake the existance of $arg2 by extracting variables from the $_POST array
      //This allows our functions down the line to validate the properly organized form data
      $arg2 = array();
      foreach ($_POST as $key => $value) {
        if (  substr($key, 0, 3) == 'cc_') {
          $arg2['credit_card'][$key] = $value;
        }
        elseif (  substr($key, 0, 8) == 'billing_') {
          $arg2['billing_address'][$key] = $value;
        }
        else {
          $arg2[$key] = $value;
        }
      }
      return uc_checkout_pane_cim('process', $arg1, $arg2);
    break;

    case 'cart-review' :
      return uc_checkout_pane_cim('review', $arg1, NULL);
    break;
  }
}

/**
 * Proxy form function so drupal_get_form can be used and func signature is compatible with FAPI
 */
function uc_cim_credit_card_form_drupal(&$form_state, $uid, $arg1) {
  return uc_cim_credit_card_form($uid, $arg1, 'billing');
}

/**
 * uc_checkout_pane_cim_functionality
 */
function uc_checkout_pane_cim_functionality($op, &$arg1, $arg2) {
  switch ($op) {
    case 'view':
    case 'process':
    case 'review':
      //Add our css and revised javascript for copying addresses to our revised address form
      drupal_add_js(drupal_get_path('module', 'uc_cim') .'/uc_cim.js');
      drupal_add_css(drupal_get_path('module', 'uc_cim') .'/uc_cim.css');
      drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css'); //For pages where the form is used not on the checkout screen, we still need that cart styling...
    break;
  }
}

/**
 * Callback function for setting up a recurring fee
 */
function uc_recurring_cim_fee($order, &$fee) {
  // Get a default SKU if none was supplied.
  if (empty($fee->model)) {
    $fee->model = db_result(db_query("SELECT model FROM {uc_products} WHERE nid = %d", $fee->nid));
  }

  $data = array(
    'cim_ppid' => $order->cim_ppid,
    'model' => $fee->model,
  );

  // need to set gateway specific fee information for renewals
  $fee->fee_handler = 'uc_cim';
  $fee->data = $data;

  return TRUE;
}

/**
 * Callback to process a recurring renewal
 */
function uc_recurring_uc_cim_renew($order, $fee) {
  // check that payment profile still exists first
  $profile_id = uc_cim_get_profile_id($order->uid);
  if ($profile_id) {
    $ppid = uc_cim_get_payment_profiles($profile_id, $order->cim_ppid);
  }

  if ($ppid) {
    // Run the charge.
    $result = uc_cim_charge($order, $fee['fee_amount'], $data = NULL, $update_cim_order_table = TRUE);
    // expose a hook that allows other modules to record/act on the responses
    // hook_gateway_renew_response($gateway_module, $order, $gateway_response, $bank_response);
    module_invoke_all('gateway_renew_response', 'uc_cim', $order, $result['gateway_message'], $result['bank_message']);
  }
  else {
    watchdog('uc_cim',
      'Order !order does not have a valid payment profile (!ppid) associated with it.',
      array(
        '!ppid' => $order->cim_ppid,
        '!order' => $order->order_id,
      ),
      WATCHDOG_ERROR,
      l(t('Order #!order', array('!order' => $order->order_id)), 'admin/store/orders/'. $order->order_id)
    );

    uc_order_comment_save($order->order_id, 0, t('Order does not have a valid payment profile (!ppid) for customer !profile_id associated with it.', array('!ppid' => $order->cim_ppid, '!profile_id' => l((int)$profile_id, 'admin/store/customers/cim/'. (int)$profile_id))));

    $message = t('Order !order does not have a valid payment profile (!ppid) associated with it.', array('!order' => $order->order_id, '!ppid' => $order->cim_ppid));
    $result = array(
      'success' => FALSE,
      'comment' => $message,
      'message' => $message,
      'uid' => 0,
      'gateway_message' => t('Invalid payment profile.'),
    );
    // expose a hook that allows other modules to record/act on the responses
    module_invoke_all('gateway_renew_response', 'uc_cim', $order, $result['gateway_message'], $result['bank_message']);
  }

  // Handle the result.
  if ($result['success'] === TRUE) {
    // expose a hook that allows other modules to record/act on the responses
    module_invoke_all('gateway_renew_response', 'uc_cim', $order, $result['gateway_message'], $result['bank_message']);
    uc_payment_enter($fee['order_id'], 'credit', $fee['fee_amount'], 0, $result['data'], t('Recurring fee payment.') .'<br />'. $result['comment']);
  }
  else {
    // expose a hook that allows other modules to record/act on the responses
    module_invoke_all('gateway_renew_response', 'uc_cim', $order, $result['gateway_message'], $result['bank_message']);

    // notify customer and/or admin
    $params = array(
      'order_id' => $fee['order_id'],
      'account' => $account,
      'amount' => $fee['fee_amount'],
      'message' => $result['message'],
    );

    // customer notification
    if (variable_get('uc_cim_send_recurring_error_notifications', 1)) {
      $account = user_load(array('uid' => $order->uid));
      $to = $account->mail;
      drupal_mail('uc_cim', 'recurring_fail_customer', $to, language_default(), $params, NULL, TRUE);
    }
    // admin notification
    if (variable_get('uc_cim_send_admin_recurring_error_notifications', 1)) {
      $admin_account = user_load(array('uid' => 1));
      $to = variable_get('uc_cim_recurring_error_notifications_to', $admin_account->mail);
      drupal_mail('uc_cim', 'recurring_fail_admin', $to, language_default(), $params, NULL, TRUE);
    }

    // mark failed order as failed and store its info
    uc_order_update_status($order->order_id, 'failed');
    $order->order_status = 'failed';
    uc_order_save($order);
    uc_order_comment_save($order->order_id, 0, $result['message']);
    //uc_order_comment_save($order->order_id, 0, t('!amount recurring fee failed. (ID: <a href="!url">!fee</a>)', array('!url' => url('admin/store/orders/recurring/view/fee/'. $fee['rfid']), '!fee' => $fee['rfid'], '!amount' => uc_currency_format($fee['fee_amount']))));

  }

  return $result['success'];
}

/**
 * Callback for uc_recurring_fee_ops().
 */
function uc_recurring_uc_cim_fee_ops($context, $fee) {
  $ops = array();

  switch ($context) {
    case 'fee_admin':
      if ($fee['remaining_intervals'] > 0) {
        $ops[] = l(t('edit'), 'admin/store/orders/recurring/'. $fee['rfid'] .'/edit');
        $ops[] = l(t('cancel'), 'admin/store/orders/recurring/'. $fee['rfid'] .'/cancel');
      }
      else {
        $ops[] = l(t('delete'), 'admin/store/orders/recurring/'. $fee['rfid'] .'/delete');
      }
      break;
    case 'user':
      $ops[] = l(t('Cancel'), 'user/'. $fee['uid'] .'/recurring/'. $fee['rfid'] .'/cancel');
      break;
  }

  return $ops;
}

/**
 * Access callback for credit card management.
 */
function uc_cim_manage_cards_access($account) {
  return (($GLOBALS['user']->uid == $account->uid) || user_access('process credit cards')) && $account->uid > 0;
}

/* END Callbacks */

/**
 * uc_cim_refund
 */
function uc_cim_refund($order_id, $transaction_id, $last_four, $amount, $type = 'CREDIT') {
  global $user; //For order comment saving, NOT processing (use order->uid for that)

  //Are we in test mode?
  if (variable_get('cim_transaction_mode', 'test') == 'test') {
    $test = '_TEST';
    $submit_data['x_test_request'] = 'TRUE';
    $url = 'https://test.authorize.net/gateway/transact.dll';
  }
  else {
    $test = '';
    $submit_data['x_test_request'] = 'FALSE';
    $url = 'https://secure.authorize.net/gateway/transact.dll';
  }

  //Setup the variables we're sending
  $submit_data = array(
    'x_version' => '3.1',
    'x_delim_data' => 'TRUE',
    'x_relay_response' => 'FALSE',
    'x_login' => variable_get('cim_login_id'. $test, ''),
    'x_tran_key' => variable_get('cim_transaction_key'. $test, ''),
    'x_amount' => uc_currency_format($amount, FALSE, FALSE, '.'),
    'x_card_num' => $last_four,
    //'x_exp_date' => $order->payment_details['cc_exp_month'] .'/'. $order->payment_details['cc_exp_year'],
    'x_type' => $type,
    'x_method' => 'CC',
    'x_trans_id' => $transaction_id,
  );

  while (list($key, $value) = each($submit_data)) {
    $data .= $key .'='. urlencode(ereg_replace(',', '', $value)) .'&';
  }

  $data = substr($data, 0, -1);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $authorize = curl_exec($ch);
  curl_close($ch);

  //Process the response
  $response = explode(variable_get('cim_delimiter', ','), $authorize);
  $response_code = $response[0];
  $response_text = $response[3];
  $approval_code = $response[4];

  if ($response_code != 1) {
    $message = t('Refund declined: !amount', array('!amount' => uc_currency_format($amount)));
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card refund declined: !text', array('!text' => $response_text)),
      'message' => t('Credit card refund declined: !text', array('!text' => $response_text)),
      'uid' => $user->uid,
    );
  }
  else {
    $message = t('Credit card refund successful: !amount', array('!amount' => uc_currency_format($amount)));
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card refund processed successfully. Approval code: !code', array('!code' => $approval_code)),
      'message' => t('Credit card refund processed successfully. Approval code: !code', array('!code' => $approval_code)),
      'uid' => $user->uid,
    );
  }

  //Save a watchdog warning message
  watchdog('uc_cim', $message, array(), WATCHDOG_WARNING);

  return $result;
}

/* ******************************************************************************
 * Helper Functions
 * *****************************************************************************/

/**
 * uc_cim_save_profile_id
 */
function uc_cim_save_profile_id($user_id, $profile_id) {
  //The table to update depends on test mode or production mode - get the right one
  $table = uc_cim_table('uc_cim');

  //Save the profile
  $sql = "INSERT INTO {". $table ."} (uid, customer_profile_id) VALUES (%d, %d)";
  db_query($sql, $user_id, $profile_id);
  if (db_affected_rows() == 0) {
    watchdog('uc_cim', 'Could not save customer profile id to database for user !user_id', array('!user_id' => $user_id), WATCHDOG_ERROR);
  }
}

/**
 * uc_cim_save_payment_profile
 */
function uc_cim_save_payment_profile($profile_id, $payment_profile_id, $last_four, $type = NULL, $exp_year = NULL, $exp_month = NULL) {
  //The table to update depends on test mode or production mode - get the right one
  $table = uc_cim_table('uc_cim_payment_profiles');

  //First try updating
  $sql = "UPDATE {". $table ."} SET last_four = '%s', cc_type = '%s', cc_exp_year = '%s', cc_exp_month = '%s', exp_notification = NULL WHERE customer_profile_id = %d AND customer_payment_profile_id = %d";
  db_query($sql, $last_four, $type, $exp_year, $exp_month, $profile_id, $payment_profile_id);

  //Otherwise, insert a new row.
  if (db_affected_rows() == 0) {
    $sql = "INSERT INTO {". $table ."} (customer_profile_id, customer_payment_profile_id, last_four, cc_type, cc_exp_year, cc_exp_month) VALUES (%d, %d, '%s', '%s', '%s', '%s')";
    db_query($sql, $profile_id, $payment_profile_id, $last_four, $type, $exp_year, $exp_month);
  }
}

/**
 * uc_cim_get_profile_id
 */
function uc_cim_get_profile_id($user_id) {
  //The table to get from depends on test mode or production mode - get the right one
  $table = uc_cim_table('uc_cim');

   //Get profile ID based on UID
  $sql = "SELECT customer_profile_id FROM {". $table ."} WHERE uid = %d";
  $result = db_query($sql, $user_id);
  $profile_id = db_result($result);
  return $profile_id;
}

/**
 * uc_cim_get_payment_profiles
 */
function uc_cim_get_payment_profiles($profile_id, $payment_profile_id = NULL) {
   //The table to get from depends on test mode or production mode - get the right one
  $table = uc_cim_table('uc_cim_payment_profiles');

  //If a payment profile id was passed, get that one
  if (is_numeric($payment_profile_id)) {
    $sql = "SELECT * FROM {". $table ."} WHERE customer_profile_id = %d AND customer_payment_profile_id = %d";
    $result = db_query($sql, $profile_id, $payment_profile_id);
    while ($getdata = db_fetch_array($result)) {
      $payment_profiles[] = $getdata;
    }
    return $payment_profiles[0];
  }

  //Otherwise, get all profiles for a given user
  else {
    $sql = "SELECT * FROM {". $table ."} WHERE customer_profile_id = %d";
    $result = db_query($sql, $profile_id);
    while ($getdata = db_fetch_array($result)) {
      $payment_profiles[] = $getdata;
    }
    return $payment_profiles;
  }
}

/**
 * uc_cim_delete_payment_profile
 */
function uc_cim_delete_payment_profile($profile_id, $payment_profile_id) {
  //The table to update depends on test mode or production mode - get the right one
  $table = uc_cim_table('uc_cim_payment_profiles');

  //Delete
  $sql = "DELETE FROM {". $table ."} WHERE customer_profile_id = %d AND customer_payment_profile_id = %d";
  db_query($sql, $profile_id, $payment_profile_id);
}

/**
 * uc_cim_in_stock_amount
 */
function uc_cim_in_stock_amount($arg1) {
  //Simple fix for now: if "do not process orders with out-of-stock items at checkout" is enabled, return $0
  if (variable_get('cim_not_process_preorders', FALSE)) {
    if ($arg1->products) {
      foreach ($arg1->products as $key => $product) {

        //If stock tracking is enabled for this product, let's check to see if we have enough in stock
        if (($stock = uc_stock_level($product->model)) !== FALSE) {

          //If there's not enough left, return 0
          if ( ($stock - $product->qty) < 0) {
            return 0;
          }
        }
      }
    }
  }

  //If no products are out of stock, return the order total
  return $arg1->order_total;

  //Given an order, determine what's in stock and return the $amount to be charged for those in stock items
  /* $num_products = 0;
  $amount = $arg1->order_total;
  if ($arg1->products) {
    foreach($arg1->products as $key => $product) {

      $num_products += $product->qty;

      //If stock tracking is enabled for this product, let's check to see if we have enough in stock
      if (($stock = uc_stock_level($product->model)) !== FALSE) {

        //If there's not enough left, take that product out of this order. (Don't forget about quantity!!)
        if ( ($stock - $product->qty) < 0) {
          $num_products -= $product->qty;
          $amount -= $product->price * $product->qty;
        }
      }
    }
  }

  //If our amount has gone negative (due to discount modules, etc) or all products are out of stock, charge $0 (ie validate the CC)
  if ($amount < 0) $amount = 0;
  if ($num_products <= 0) $amount = 0;

  return $amount; */
}

/**
 * uc_cim_create_order_object
 */
function uc_cim_create_order_object(&$order, $formvalues, $lookup_cc = FALSE) {
  //Adds the new credit card billing info to an order object

  //cc_number is the only tricky one - have to support not losing the credit card # during masking
  //Use $lookup_cc to make sure we want to get the credit card from the database - good for orders, bad for API calls generally
  //@TO DO: Get rid of this when uc_payment_credit table is depricated in U2.0
  if ($lookup_cc == TRUE && substr($formvalues['cc_number'], 0, strlen(t('(Last 4) '))) == t('(Last 4) ')) {
    //drupal_set_message(uc_cim_printr(uc_credit_cache('save', $_SESSION['sescrd'])));
    //$result = db_query("SELECT cc_number FROM {uc_payment_credit} WHERE order_id = %d", $order->order_id);
    /* if ($number = db_result($result)) {
      $order->payment_details['cc_number'] = $cache['cc_number'];//$number;
    }
    else { */
      //@todo This will prevent query errors when the form is resubmitted, but forces the user re-enter their credit card number if they dont have access to view their own cc numbers
      //if they failed validation on another field item.  Not sure if this code applies to anywhere other than checkout time, but a secure method
      //for storing the full CC number could (should?) be utilized
      $order->payment_details['cc_number'] = '';
    //}
  }
  else {
    $order->payment_details['cc_number'] = check_plain($formvalues['cc_number']);
  }

  //Others are straight forward - put the form values in the order object
  if (isset($formvalues['uid'])) {
    $order->uid = $formvalues['uid'];
  }
  $order->billing_first_name = $formvalues['billing_first_name'];
  $order->billing_last_name = $formvalues['billing_last_name'];
  $order->billing_company = $formvalues['billing_company'];
  $order->billing_street1 = $formvalues['billing_street1'];
  $order->billing_street2 = $formvalues['billing_street2'];
  $order->billing_city = $formvalues['billing_city'];
  $order->billing_zone = $formvalues['billing_zone'];
  $order->billing_postal_code = $formvalues['billing_postal_code'];
  $order->billing_country = $formvalues['billing_country'];
  $order->billing_phone = $formvalues['billing_phone'];
  $order->payment_details['cc_type'] = check_plain($formvalues['cc_type']);
  $order->payment_details['cc_owner'] = check_plain($formvalues['cc_owner']);
  $order->payment_details['cc_exp_month'] = check_plain($formvalues['cc_exp_month']);
  $order->payment_details['cc_exp_year'] = check_plain($formvalues['cc_exp_year']);
  $order->payment_details['cc_cvv'] = check_plain($formvalues['cc_cvv']);
  $order->payment_details['cc_bank'] = check_plain($formvalues['cc_bank']);
}

/**
 * uc_cim_table
 */
function uc_cim_table($base_table_name) {
  if (variable_get('cim_transaction_mode', 'test') == 'test') {
    $table = $base_table_name .'_TEST';
  }
  else {
    $table = $base_table_name;
  }
  return $table;
}
/* END HELPER */

//------------------------------------------------------------------------------

/**
 * Allow a user to change the payment profile associated with an order
 * so that future charges will be applied against the new payment profile.
 */
function uc_cim_switch_payment_profile_form(&$form_state, $order, $profile = NULL) {
  $customer_profile_id = uc_cim_get_profile_id($order->uid);
  $payment_profiles = uc_cim_get_payment_profiles($customer_profile_id);

  if (!is_array($payment_profiles)) {
    drupal_set_message(t('Please enter a credit card on your !link page.  Then you will be able to select it here to apply it to this order.', array('!link' => l(t('manage credit cards'), 'user/'. $order->uid .'/creditcards'))));
    return array();
  }

  $options = array();

  foreach ( $payment_profiles as $payment_profile ) {
    $options[$payment_profile['customer_payment_profile_id']] = $payment_profile['cc_type'] .': xxxx'. $payment_profile['last_four'] .' (Exp: '. $payment_profile['cc_exp_month'] .'/'. $payment_profile['cc_exp_year'] .')';
  }

  $form['order_id'] = array(
    '#type' => 'value',
    '#value' => $order->order_id,
  );

  $form['ppid'] = array(
    '#title' => t('Payment profile'),
    '#type' => 'select',
    '#options' => $options,
    '#description' => t('Select a credit card from those that you have entered at your !link screen.  Future charges will be applied against this card.  This will not affect past charges.', array('!link' => l(t('manage credit cards'), 'user/'. $order->uid .'/creditcards'))),
  );

  $form['submit_card'] = array(
    '#type' => 'submit',
    '#value' => t('Use this card for future charges'),
  );
  return $form;
}

/**
 * User has requested a change to which card is being charged for an order.
 * Update the order to reflect that request.
 */
function uc_cim_switch_payment_profile_form_submit(&$form, &$form_state) {
  $order_id = $form_state['values']['order_id'];
  $ppid = $form_state['values']['ppid'];
  $order = uc_order_load( $order_id );
  $customer = user_load( array( 'uid' => $order->uid ) );
  $customer_profile_id = uc_cim_get_profile_id($order->uid);
  $payment_profile = uc_cim_get_payment_profiles($customer_profile_id, $ppid);
  if ($payment_profile) {
    $previous = $order->cim_ppid;
    if ($previous != $payment_profile['customer_payment_profile_id']) {
      $order->cim_ppid = $order->data['cim_ppid'] = $payment_profile['customer_payment_profile_id'];
      if (!isset($order->data['previous_ppid'])) {
        $order->data['previous_ppid'] = array();
      }
      $order->data['previous_ppid'][time()] = $previous;
      // update billing address
      uc_cim_update_order_billing_address($order);
      uc_order_save($order);
      uc_order_log_changes($order->order_id, array('Payment profile' => array('old' => $previous, 'new' => $order->cim_ppid)));

      db_query("UPDATE {uc_payment_cim} SET cim_ppid = %d WHERE order_id = %d", $order->cim_ppid, $order->order_id);
      if (db_affected_rows() == 0) {
        db_query("INSERT INTO {uc_payment_cim} (order_id, cim_ppid) VALUES (%d, %d)", $order->order_id, $order->cim_ppid);
      }

      drupal_set_message(t('Payment updated.'));
    }
    else {
      drupal_set_message(t('No change to payment.'));
    }
  }
  else {
    drupal_set_message(t('Error assigning new payment profile.  The selected payment profile could not be matched to the customer profile.  This error has been logged.'));
    watchdog('uc_cim',
      'Error assigning new payment profile to order !order_id. The selected payment profile !profile_id could not be matched to the customer profile !customer_id.',
      array(
        '!order_id' => $order->order_id,
        '!profile_id' => $ppid,
        '!customer_id' => $order->uid,
      ),
      WATCHDOG_ERROR
    );
  }
}

/**
 * Update the billing address for an order when the order payment profile
 * is changed.
 */
function uc_cim_update_order_billing_address( &$order ) {
  // Include CIM functions
  module_load_include('inc','uc_cim', 'includes/uc_cim.cim');

  $response = get_customer_payment_profile_request(uc_cim_get_profile_id($order->uid), $order->cim_ppid);
  if ($response->messages->message->code == 'I00001') {
    $order->billing_first_name = (string)$response->paymentProfile->billTo->firstName;
    $order->billing_last_name = (string)$response->paymentProfile->billTo->lastName;
    $order->billing_company = (string)$response->paymentProfile->billTo->company;
    $order->billing_street1 = (string)$response->paymentProfile->billTo->address;
    $order->billing_city = (string)$response->paymentProfile->billTo->city;

    $country_name = (string)$response->paymentProfile->billTo->country;
    $country_id = db_result(db_query("SELECT country_id FROM {uc_countries} WHERE country_name LIKE '%s'", $country_name));
    if ($country_id) {
      $order->billing_country = $country_id;
      $state = (string)$response->paymentProfile->billTo->state;
      $zone_id = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_country_id=%d AND zone_code LIKE '%s'", $country_id, strtoupper($state)));
      if ($zone_id) {
        $order->billing_zone = $zone_id;
      }
    }
    $order->billing_postal_code = (string)$response->paymentProfile->billTo->zip;
    $order->billing_phone = (string)$response->paymentProfile->billTo->phoneNumber;
  }
}
